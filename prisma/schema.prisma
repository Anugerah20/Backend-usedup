// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(uuid())
  email                String             @unique
  foto                 String?
  fullname             String?
  password             String?
  bio                  String?
  no_telp              String?
  token_reset_password String?
  token_verif          String?
  kuota_iklan          Int                @default(0)
  kuota_sorot          Int                @default(0)
  advert               Advert[]
  likedAdverts         Like[]
  isVerified           Boolean            @default(false)
  isGmailGoogle        Boolean            @default(false)
  RiwayatPembelian     RiwayatPembelian[]
  rooms                Room[]
  messages             Message[]
  createdAt            DateTime?           @default(now())
  updatedAt            DateTime?           @updatedAt
}

model Room {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  users     User[]
  messages  Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime? @default(now())
  senderId  String
  roomId    String
  sender    User     @relation(fields: [senderId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
}

model Advert {
  id              String    @id @default(uuid())
  title           String
  description     String
  price           BigInt
  image           Json
  address         String?
  latitude        Float?
  isHighlighted   Boolean   @default(false)
  highlightExpiry DateTime?
  longitude       Float?
  category        Category? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  user            User?     @relation(fields: [userId], references: [id])
  userId          String?
  province        Province? @relation(fields: [provinceId], references: [id])
  provinceId      String?
  likes           Like[]
  createdAt       DateTime?  @default(now())
}

model Like {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  advert   Advert @relation(fields: [advertId], references: [id], onDelete: Cascade)
  advertId String
  createdAt DateTime? @default(now())
}

model Category {
  id      String   @id @default(uuid())
  name    String
  slug    String?
  adverts Advert[]
  createdAt DateTime? @default(now())
}

model Province {
  id      String   @id @default(uuid())
  name    String
  adverts Advert[]
  createdAt DateTime? @default(now())
}

model Paket {
  id               String             @id @default(cuid())
  name             String
  description      Json?
  type             PackageType?
  price            Int
  duration         Int?
  kuota            Int?
  expired          DateTime?
  createdAt        DateTime?           @default(now())
  updatedAt        DateTime?           @updatedAt
  RiwayatPembelian RiwayatPembelian[]
}

enum PackageType {
  IKLAN
  SOROT
  PREMIUM
}

model RiwayatPembelian {
  id          String   @id @default(cuid())
  order_id    String
  payment_url String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  paket       Paket?   @relation(fields: [paketId], references: [id])
  paketId     String?
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  PENDING
  SUCCESS
  FAILED
}
